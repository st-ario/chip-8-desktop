#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

mod screen;

use chip_8_core::*;
use screen::*;

#[rustfmt::skip]
static G_FB: FrameBuffer = [
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xF0,0x20,0xF0,0xF0,0x90,0xF0,0xF0,0xF0,
    0x90,0x60,0x10,0x10,0x90,0x80,0x80,0x10,
    0x90,0x20,0xF0,0xF0,0xF0,0xF0,0xF0,0x20,
    0x90,0x20,0x80,0x10,0x10,0x10,0x90,0x40,
    0xF0,0x70,0xF0,0xF0,0x10,0xF0,0xF0,0x40,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xF0,0xF0,0xF0,0xE0,0xF0,0xE0,0xF0,0xF0,
    0x90,0x90,0x90,0x90,0x80,0x90,0x80,0x80,
    0xF0,0xF0,0xF0,0xE0,0x80,0x90,0xF0,0xF0,
    0x90,0x10,0x90,0x90,0x80,0x90,0x80,0x80,
    0xF0,0xF0,0x90,0xE0,0xF0,0xE0,0xF0,0x80,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xF0,0x20,0xF0,0xF0,0x90,0xF0,0xF0,0xF0,
    0x90,0x60,0x10,0x10,0x90,0x80,0x80,0x10,
    0x90,0x20,0xF0,0xF0,0xF0,0xF0,0xF0,0x20,
    0x90,0x20,0x80,0x10,0x10,0x10,0x90,0x40,
    0xF0,0x70,0xF0,0xF0,0x10,0xF0,0xF0,0x40,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xF0,0xF0,0xF0,0xE0,0xF0,0xE0,0xF0,0xF0,
    0x90,0x90,0x90,0x90,0x80,0x90,0x80,0x80,
    0xF0,0xF0,0xF0,0xE0,0x80,0x90,0xF0,0xF0,
    0x90,0x10,0x90,0x90,0x80,0x90,0x80,0x80,
    0xF0,0xF0,0x90,0xE0,0xF0,0xE0,0xF0,0x80,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
    0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
    0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
    0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
    0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
    0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
    0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
];

struct Emulator {
    fb: chip_8_core::FrameBuffer,
    screen: screen::Screen,
}

impl Emulator {
    fn new(ctx: &mut ggez::Context) -> ggez::GameResult<Emulator> {
        //let fb = FrameBuffer::default();
        let fb = G_FB.clone();
        let screen = Screen::new(ctx, &fb)?;

        Ok(Emulator { fb, screen })
    }
}

impl ggez::event::EventHandler<ggez::GameError> for Emulator {
    fn update(&mut self, _ctx: &mut ggez::Context) -> ggez::GameResult {
        Ok(())
    }

    fn draw(&mut self, ctx: &mut ggez::Context) -> ggez::GameResult {
        self.screen.draw(ctx, &self.fb)
    }
}

fn main() -> ggez::GameResult {
    let window_mode = ggez::conf::WindowMode {
        width: (SCREEN_WIDTH * SCREEN_SCALE_FACTOR) as f32,
        height: (SCREEN_HEIGHT * SCREEN_SCALE_FACTOR) as f32,
        maximized: false,
        fullscreen_type: ggez::conf::FullscreenType::Windowed,
        borderless: false,
        min_width: 1.0,
        max_width: 0.0,
        min_height: 1.0,
        max_height: 0.0,
        resizable: false,
        visible: true,
        transparent: false,
        resize_on_scale_factor_change: false,
        logical_size: None,
    };

    let mut window_setup = ggez::conf::WindowSetup::default();
    window_setup.title = String::from("Chip-8 Emulator");
    window_setup.vsync = false;
    window_setup.srgb = false;
    //window_setup.icon= TODO,

    let (mut ctx, event_loop) = ggez::ContextBuilder::new("chip-8-emulator", "Stefano Ariotta")
        .window_setup(window_setup)
        .window_mode(window_mode)
        .backend(ggez::conf::Backend::Vulkan)
        .build()?;

    let emulator = Emulator::new(&mut ctx)?;

    ggez::event::run(ctx, event_loop, emulator);
}
